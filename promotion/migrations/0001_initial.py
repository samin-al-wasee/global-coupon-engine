# Generated by Django 4.0.2 on 2023-07-03 05:14

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import promotion.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand_name', models.CharField(max_length=50, unique=True, verbose_name='Name')),
                ('brand_slug', models.SlugField(editable=False)),
                ('brand_logo', models.FileField(upload_to=promotion.models.rename_brand_logo, verbose_name='Logo')),
                ('brand_link', models.CharField(max_length=200, verbose_name='URL')),
            ],
            options={
                'ordering': ['brand_name'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=50, verbose_name='Username')),
                ('comment', models.TextField(max_length=1000, verbose_name='Comment')),
                ('comment_created_on', models.DateTimeField(auto_now_add=True)),
                ('comment_last_updated_on', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-comment_last_updated_on', '-comment_created_on'],
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_name', models.CharField(max_length=50, unique=True, verbose_name='Name')),
                ('country_slug', models.SlugField(editable=False)),
                ('country_logo', models.FileField(upload_to=promotion.models.rename_country_logos, verbose_name='Logo')),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
                'ordering': ['country_name'],
            },
        ),
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('offer_title', models.CharField(max_length=50, verbose_name='Title')),
                ('offer_details', models.TextField(max_length=300, verbose_name='Description')),
                ('offer_type', models.CharField(choices=[('CODE', 'Code'), ('DEAL', 'Deal')], max_length=4, verbose_name='Type')),
                ('offer_amount', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Amount')),
                ('offer_code', models.CharField(default="You don't need any code!", help_text='Leave this field empty for deals.', max_length=30, verbose_name='Code')),
                ('offer_expires_on', models.DateField(verbose_name='Expires On')),
                ('offer_next_available_on', models.DateField(verbose_name='Next Available On')),
                ('offer_created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created On')),
                ('offer_last_updated_on', models.DateTimeField(auto_now=True, verbose_name='Last Updated On')),
                ('offered_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='promotion.brand', verbose_name='Brand')),
                ('offered_in', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='promotion.country', verbose_name='Country')),
            ],
            options={
                'ordering': ['-offer_last_updated_on', '-offer_created_on'],
            },
        ),
        migrations.AddField(
            model_name='brand',
            name='exists_in',
            field=models.ManyToManyField(to='promotion.Country', verbose_name='Countries'),
        ),
    ]
